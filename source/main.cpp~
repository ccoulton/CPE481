#include <tonc.h>
#include "metr.h"  //metroid object
#include "samusrunR.h"
#include "Monster.h" //moster class

#include <string.h>
#include <stdio.h>
#include <stdlib.h>

#define CLR_UP RGB15(27,27,29)
#define RGB16(r,g,b) ((r)+(g<<5)+(b<<10))
//Screen is [10+15*240] RGB16(0,31,0)
OBJ_ATTR obj_buffer[128];
OBJ_AFFINE *obj_aff_buffer = (OBJ_AFFINE*)obj_buffer;
int offset = 32;

void initMain(){
	irq_init(NULL);
	irq_add(II_VBLANK, NULL);
	REG_DISPCNT= DCNT_MODE0 | DCNT_BG0 | DCNT_BG1 | DCNT_OBJ | DCNT_OBJ_1D | DCNT_WIN0;
	return;
}
int main(){
	REG_DISPCNT = DCNT_MODE0 | DCNT_BG0;
	tte_init_se_default(0, BG_CBB(0)|BG_SBB(31));
	tte_write("#{P:72,135}");
	tte_write("Press start!");
	while (1){
		vid_vsync();
		key_poll();
		if(key_hit(KEY_START))
			break;
	}
	Monster metroid;
	metroid.initMonster(metrPal, metrPalLen, metrTiles, metrTilesLen);
	//initMain();
	metroid.loadtoVram();
	memcpy(&tile_mem[4][offset], samusrunRTiles, samusrunRTilesLen);
	memcpy(pal_obj_mem, samusrunRPal, samusrunRPalLen);
	oam_init(obj_buffer, 128);
	//REG_DISPCNT = DCNT_OBJ | DCNT_OBJ_1D;
	initMain();
	metroid.xpos = 96;
	metroid.ypos = 32;
	int xpos = 32;
	int ypos = 60;
	u32 tid = 0, pb = 0;
	OBJ_ATTR *metr = &obj_buffer[0];
	OBJ_ATTR *samu[5];
	samu[0] = &obj_buffer[1];
	samu[1] = &obj_buffer[2];
	samu[2] = &obj_buffer[3];
	samu[3] = &obj_buffer[4];
	samu[4] = &obj_buffer[5];
	for(int i=0; i<5; i++){
		obj_set_attr(samu[i], ATTR0_WIDE, ATTR1_SIZE_16, ATTR2_PALBANK(pb)|(tid+offset+4*i));
		obj_set_pos(samu[i], xpos, ypos+(8*i));
	}
	obj_set_attr(metr, ATTR0_SQUARE, ATTR1_SIZE_32, ATTR2_PALBANK(pb)|tid);
	obj_set_pos(metr, metroid.xpos, metroid.ypos);
	int numframe=0;
	int framerate=0;
	int samustile=0;
	for( ; ;){
		vid_vsync();
		key_poll();
		xpos += 2*key_tri_horz();
		ypos += 2*key_tri_vert();
		samustile = numframe*20; //frame per press
		framerate++;
		if(framerate==6){
			numframe++;
			framerate =0;
			if (numframe == 10)
				numframe = 0;
		}
		if(key_hit(KEY_START))
			REG_DISPCNT ^= DCNT_OBJ_1D;
		
		metr->attr2 = ATTR2_BUILD(tid, pb, 0);
		
		obj_set_pos(metr, metroid.xpos, metroid.ypos);
		for(int i=0; i<5; i++){
			samu[i]->attr2 = ATTR2_BUILD(samustile+offset+i*4, pb, 0);
			obj_set_pos(samu[i], xpos, ypos+i*8);
		}
		//oam_copy(oam_mem, obj_buffer, 1);
		//oam_copy(oam_mem, obj_buffer, 2);
		oam_copy(oam_mem, obj_buffer, 6);
	}
	return 0;
	}			
